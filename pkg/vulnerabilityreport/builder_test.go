package vulnerabilityreport_test

import (
	"io"
	"testing"
	"time"

	"github.com/khulnasoft-lab/vul-operator/pkg/apis/khulnasoft-lab/v1alpha1"
	"github.com/khulnasoft-lab/vul-operator/pkg/docker"
	"github.com/khulnasoft-lab/vul-operator/pkg/vuloperator"
	"github.com/khulnasoft-lab/vul-operator/pkg/vulnerabilityreport"
	"github.com/onsi/gomega"
	appsv1 "k8s.io/api/apps/v1"
	batchv1 "k8s.io/api/batch/v1"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/utils/pointer"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

func TestReportBuilder(t *testing.T) {
	g := gomega.NewGomegaWithT(t)
	report, err := vulnerabilityreport.NewReportBuilder(scheme.Scheme).
		Controller(&appsv1.ReplicaSet{
			TypeMeta: metav1.TypeMeta{
				Kind:       "ReplicaSet",
				APIVersion: "apps/v1",
			},
			ObjectMeta: metav1.ObjectMeta{
				Name:      "some-owner",
				Namespace: "qa",
				Labels:    labels.Set{"tier": "tier-1", "owner": "team-a"},
			},
		}).
		Container("my-container").
		PodSpecHash("xyz").
		Data(v1alpha1.VulnerabilityReportData{}).
		ResourceLabelsToInclude([]string{"tier"}).
		Get()

	g.Expect(err).ToNot(gomega.HaveOccurred())
	g.Expect(report).To(gomega.Equal(v1alpha1.VulnerabilityReport{
		ObjectMeta: metav1.ObjectMeta{
			Name:      "replicaset-some-owner-my-container",
			Namespace: "qa",
			OwnerReferences: []metav1.OwnerReference{
				{
					APIVersion:         "apps/v1",
					Kind:               "ReplicaSet",
					Name:               "some-owner",
					Controller:         pointer.Bool(true),
					BlockOwnerDeletion: pointer.Bool(false),
				},
			},
			Labels: map[string]string{
				vuloperator.LabelResourceKind:      "ReplicaSet",
				vuloperator.LabelResourceName:      "some-owner",
				vuloperator.LabelResourceNamespace: "qa",
				vuloperator.LabelContainerName:     "my-container",
				vuloperator.LabelResourceSpecHash:  "xyz",
				"tier":                               "tier-1",
			},
		},
		Report: v1alpha1.VulnerabilityReportData{},
	}))
}

func TestScanJobBuilder(t *testing.T) {
	t.Run("Should get scan job with labels", func(t *testing.T) {
		g := gomega.NewGomegaWithT(t)
		job, _, err := vulnerabilityreport.NewScanJobBuilder().
			WithPlugin(&testPlugin{}).
			WithPluginContext(vuloperator.NewPluginContext().
				WithName("test-plugin").
				WithNamespace("vul-operator-ns").
				WithServiceAccountName("vul-operator-sa").
				Get()).
			WithTimeout(3 * time.Second).
			WithObject(&appsv1.ReplicaSet{
				TypeMeta: metav1.TypeMeta{
					Kind:       "ReplicaSet",
					APIVersion: "apps/v1",
				},
				ObjectMeta: metav1.ObjectMeta{
					Name:      "nginx-6799fc88d8",
					Namespace: "prod-ns",
				},
				Spec: appsv1.ReplicaSetSpec{
					Template: corev1.PodTemplateSpec{
						Spec: corev1.PodSpec{
							Containers: []corev1.Container{
								{
									Name:  "nginx",
									Image: "nginx:1.16",
								},
							},
						},
					},
					Selector: &metav1.LabelSelector{},
				},
			}).
			Get()
		g.Expect(err).ToNot(gomega.HaveOccurred())
		g.Expect(job).ToNot(gomega.BeNil())
		g.Expect(job).To(gomega.Equal(&batchv1.Job{
			ObjectMeta: metav1.ObjectMeta{
				Name:      "scan-vulnerabilityreport-64d65c457",
				Namespace: "vul-operator-ns",
				Labels: map[string]string{
					vuloperator.LabelK8SAppManagedBy:            "vul-operator",
					vuloperator.LabelVulnerabilityReportScanner: "test-plugin",
					vuloperator.LabelResourceKind:               "ReplicaSet",
					vuloperator.LabelResourceName:               "nginx-6799fc88d8",
					vuloperator.LabelResourceNamespace:          "prod-ns",
					vuloperator.LabelResourceSpecHash:           "788f48d57f",
				},
				Annotations: map[string]string{
					vuloperator.AnnotationContainerImages: `{"nginx":"nginx:1.16"}`,
				},
			},
			Spec: batchv1.JobSpec{
				BackoffLimit:          pointer.Int32(0),
				Completions:           pointer.Int32(1),
				ActiveDeadlineSeconds: pointer.Int64(3),
				Template: corev1.PodTemplateSpec{
					ObjectMeta: metav1.ObjectMeta{
						Labels: map[string]string{
							vuloperator.LabelK8SAppManagedBy:            "vul-operator",
							vuloperator.LabelVulnerabilityReportScanner: "test-plugin",
							vuloperator.LabelResourceKind:               "ReplicaSet",
							vuloperator.LabelResourceName:               "nginx-6799fc88d8",
							vuloperator.LabelResourceNamespace:          "prod-ns",
							vuloperator.LabelResourceSpecHash:           "788f48d57f",
						},
					},
					Spec: corev1.PodSpec{},
				},
			},
		}))
	})

	t.Run("Should get scan job running in workload namespace", func(t *testing.T) {
		g := gomega.NewGomegaWithT(t)
		job, _, err := vulnerabilityreport.NewScanJobBuilder().
			WithPlugin(&testPlugin{}).
			WithPluginContext(vuloperator.NewPluginContext().
				WithName("test-plugin").
				WithNamespace("vul-operator-ns").
				WithServiceAccountName("vul-operator-sa").
				WithVulOperatorConfig(vuloperator.ConfigData{
					vuloperator.KeyVulnerabilityScansInSameNamespace: "true"},
				).
				Get()).
			WithTimeout(3 * time.Second).
			WithObject(&appsv1.ReplicaSet{
				TypeMeta: metav1.TypeMeta{
					Kind:       "ReplicaSet",
					APIVersion: "apps/v1",
				},
				ObjectMeta: metav1.ObjectMeta{
					Name:      "nginx-6799fc88d8",
					Namespace: "prod-ns",
				},
				Spec: appsv1.ReplicaSetSpec{
					Template: corev1.PodTemplateSpec{
						Spec: corev1.PodSpec{
							Containers: []corev1.Container{
								{
									Name:  "nginx",
									Image: "nginx:1.16",
								},
							},
						},
					},
					Selector: &metav1.LabelSelector{},
				},
			}).
			Get()
		g.Expect(err).ToNot(gomega.HaveOccurred())
		g.Expect(job).ToNot(gomega.BeNil())
		g.Expect(job).To(gomega.Equal(&batchv1.Job{
			ObjectMeta: metav1.ObjectMeta{
				Name:      "scan-vulnerabilityreport-64d65c457",
				Namespace: "prod-ns",
				Labels: map[string]string{
					vuloperator.LabelK8SAppManagedBy:            "vul-operator",
					vuloperator.LabelVulnerabilityReportScanner: "test-plugin",
					vuloperator.LabelResourceKind:               "ReplicaSet",
					vuloperator.LabelResourceName:               "nginx-6799fc88d8",
					vuloperator.LabelResourceNamespace:          "prod-ns",
					vuloperator.LabelResourceSpecHash:           "788f48d57f",
				},
				Annotations: map[string]string{
					vuloperator.AnnotationContainerImages: `{"nginx":"nginx:1.16"}`,
				},
			},
			Spec: batchv1.JobSpec{
				BackoffLimit:          pointer.Int32(0),
				Completions:           pointer.Int32(1),
				ActiveDeadlineSeconds: pointer.Int64(3),
				Template: corev1.PodTemplateSpec{
					ObjectMeta: metav1.ObjectMeta{
						Labels: map[string]string{
							vuloperator.LabelK8SAppManagedBy:            "vul-operator",
							vuloperator.LabelVulnerabilityReportScanner: "test-plugin",
							vuloperator.LabelResourceKind:               "ReplicaSet",
							vuloperator.LabelResourceName:               "nginx-6799fc88d8",
							vuloperator.LabelResourceNamespace:          "prod-ns",
							vuloperator.LabelResourceSpecHash:           "788f48d57f",
						},
					},
					Spec: corev1.PodSpec{},
				},
			},
		}))
	})
}

type testPlugin struct {
}

func (p *testPlugin) Init(_ vuloperator.PluginContext) error {
	return nil
}

func (p *testPlugin) GetScanJobSpec(_ vuloperator.PluginContext, _ client.Object, _ map[string]docker.Auth, _ *corev1.SecurityContext) (corev1.PodSpec, []*corev1.Secret, error) {
	return corev1.PodSpec{}, nil, nil
}

func (p *testPlugin) ParseReportData(_ vuloperator.PluginContext, _ string, _ io.ReadCloser) (v1alpha1.VulnerabilityReportData, v1alpha1.ExposedSecretReportData, *v1alpha1.SbomReportData, error) {
	return v1alpha1.VulnerabilityReportData{}, v1alpha1.ExposedSecretReportData{}, &v1alpha1.SbomReportData{}, nil
}
